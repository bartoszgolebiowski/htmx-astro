---
interface Post {
  userId: number;
  id: number;
  title: string;
  body: string;
}

const page = Astro.url.searchParams.get("_page") ?? "1";
const limit = Astro.url.searchParams.get("_limit") ?? "10";

const searchParams = new URLSearchParams({
  _page: page,
  _limit: limit,
})
const posts = (await fetch(
  `https://jsonplaceholder.typicode.com/posts?${searchParams.toString()}`
).then((res) => res.json())) as Post[];

---

<table>
  <caption>Posts</caption>
  <thead>
    <tr>
      <th>Id</th>
      <th>UserId</th>
      <th>Title</th>
      <th>Body</th>
    </tr>
  </thead>
  <tbody>
    {
      posts.map((user) => (
        <tr>
          <td>{user.id}</td>
          <td>{user.userId}</td>
          <td>{user.title}</td>
          <td>{user.body}</td>
        </tr>
      ))
    }
  </tbody>
  <tfoot>
    <tr>
      <td colspan="3">
        <a href={`?_page=${page}&_limit=10`}>10</a>
        <a href={`?_page=${page}&_limit=20`}>20</a>
        <a href={`?_page=${page}&_limit=50`}>50</a>
      </td>
      <td colspan="1">
        <a
          href={page !== "1"
            ? `?_page=${Number(page) - 1}&_limit=${limit}`
            : "#"}>Prev</a
        >
        <a href={`?_page=${Number(page) + 1}&_limit=${limit}`}>Next</a>
      </td>
    </tr>
  </tfoot>
</table>

<style scoped>
  table {
    border-spacing: 0;
    border: 1px solid black;
    & caption {
      font-size: 1.5rem;
      font-weight: bold;
      padding: 0.5rem;
      border-bottom: 1px solid black;
    }
    & tr {
      :last-child {
        td {
          border-bottom: 0;
        }
      }
    }

    & th, td {
      margin: 0;
      padding: 0.5rem;
      border-bottom: 1px solid black;
      border-right: 1px solid black;

      :last-child {
        border-right: 0;
      }
    }
  }
</style>
